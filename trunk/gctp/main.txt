/** @mainpage
<CENTER>
<B>gctpです、はじめまして。</B>\n
<SMALL>(gctpとはGameCatapultの略称で、名前空間にもなっています)</SMALL>\n
<TABLE BORDER="0"><TR><TD VALIGN="TOP" WIDTH="180">
@li @ref intro
@li @ref feature
@li @ref license
@li @ref install
</TD><TD>
@image html gctp.jpg
</TD></TR></TABLE>
<TABLE><TR><TD WIDTH="500">
<CENTER><H3>バーチャルゲームライブラリーって何？ </H3></CENTER>
　バーチャルゲームライブラリーとは、<B>バーチャルゲーム</B>と<B>ゲームライブラリー</B>の
<B>あいの子</B>です。<B>何がなんだかわかりません</B>。\n

　普通のゲーム製作用ライブラリーは、ネットでソースやＦＡＱを公開しているプログラマー向けの実用物です。
でも、gctpは完全な実装を持っていません。バーチャルな世界に構想だけが存在する<B>作りかけのライブラリー</B>です。
ですから、上の全身像もイラストではなく写真です。<B>何がなんだかわかりません</B>。\n
　 gctpにはボトルネックもありませんし、デッドロックもしなければ<B>マシンごとあの世</B>にも行きません。
枯れたライブラリー以上に理想的な、新世紀のライブラリーの形だと言えます。\n

　ただし将来本当にソースを公開しちゃった場合、友達が３万人できると実用ライブラリーになってしまう
<B>メタルアイドル</B>な一面も持っています。<B>何がなんだかわかりません</B>。
</TD></TR></TABLE>
</CENTER>
*/

/** @page license ライセンス
Copyright &copy; 2001-2004 SAM <sowwaNO-SPAM-THANKS@water.sannet.ne.jp>. All rights reserved.

　ソースコード形式であれバイナリ形式であれ、あるいは本ソフトウェアを使用して製作した応用ソフトウェアは、
変更の有無に関わらず、以下の条件を満たす限りにおいて、再配布および使用を許可します。

@par 再配布・変更・利用条件
　ソースコード形式で再配布する場合、上記著作権表示、 本条件書および下記免責事項を必ず含めてください。また変更箇所が
ある場合その部分を明記してください。\n
　バイナリ形式（コンパイル済みのライブラリファイルなどの形態）で再配布する場合、上記著作権表示、本条件書および
下記免責事項、さらに配布物とともに提供される文書と、もしあれば他の資料も、必ず含めてください。また変更箇所がある場合
その部分を明記してください。\n
　応用ソフトウェア（本ソフトウェアを使用して製作したソフトウェア。これはライブラリのような単体で実行不可能なもの
も含む）は、静的リンクであれ動的リンクであれ、本ソフトウェア当該部分の著作権はSAM（または、寄与者）に帰属しますが、
応用ソフトウェアそのものの著作権は応用ソフトウェア製作者に帰属するものとし、応用ソフトウェアに上記著作権表示、
本条件書および下記免責事項を同梱する義務無しに配布することが出来るものとします。

@par 免責事項
　本ソフトウェアは SAM によって、“現状のまま”提供されるものとします。本ソフトウェアについては、明示的･暗黙的を
問わず、商用品として通常そなえるべき品質をそなえているという保証も、特定の目的に適合するという保証を含め、何の
保証もなされません。事由のいかんを問わず、損害発生の原因いかんを問わず、且つ、責任の根拠が契約であるか厳格責任で
あるか (過失その他) 不法行為であるかを問わず、SAM も寄与者も、仮にそのような損害が発生する可能性を知らされていた
としても、本ソフトウェアの使用から発生した直接損害、間接損害、偶発的な損害、特別損害、懲罰的損害または結果損害の
いずれに対しても (代替品またはサービスの提供、使用機会、データまたは利益の損失の補償、または、業務の中断に対する
補償を含め) 責任をいっさい負いません。
*/

/** @page intro はじめに
　えー、まじめな話、GameCatapultとはゲーム開発のためのミドルウェア、を目指して開発中のライブラリです。\n
　これ単体では何にも面白いことはできません｡
*/

/** @page feature 機能
*/

/** @page install インストール
　完成したライブラリではないのでインストールもへったくれもないですが、とりあえずテストコードのビルドが出来ない
のでは話にならないですから、そのためのセッティングを説明しますね。ちなみに<B>超めんどい</B>です。ごめんなさい。
説明する僕も超めんどいので<B>おあいこ</B>ということで。

　あと、ここに書いてあることは基本的に古いです……いいかげんちゃんとしないと｡

@par 環境
　開発環境ですが、VC6で行っています。多分VC7(VisualC++.NET)でも問題ないと思います。VC以外のビルド環境は用意して
いませんが、DirextXSDKが使用できるなら他の環境(Borland)でも<B>がんばれば</B>動くかもしれません。
とりあえずお父さんはPS2にそんなに苦労せずに移植できているようなので、それなりのポータビリティーはあると思います。
あくまでそれなりですけど。もちろんDirectXラップ部分、gctp::Graphicは全書き換えです。\n
　このライブラリはどちらかというと無加工でアプリにアタッチして使う、というより、
ソースレベルで直接プロジェクトに突っ込んで使う、というような使い方を想定しています。
将来OpenGLをサポートすることがあったとしても、動的にAPIを選べるような構造にせずソースの差し替えで実現することになる
と思います。そのほうがコンシューマへの移植がしやすいからです。

@par 依存ライブラリ
　で、依存するライブラリですが、gctpはDirectX専用ですので、まずDirectX8.1以降が必要です。
DirectX9SDKにもDirectX8のSDKが付属していますので、DirectX9SDKをすでに入れている方でもわざわざダウングレードする
必要はないようですよ？\n
　あと、VC6の方は<A HREF="http://www.stlport.com/">STLport</A>が必須です。STLport独自のコンテナ(hashなど)は
使用してませんし、一番でかいのはauto_ptrの挙動の違いですので、VC7ではSTLport無しでもOKかもしれません。
試してないので分からないです。\n
　また<A HREF="http://www.boost.org/more/download.html">boost</A>も必要です。さらにboostライブラリの中でも
ビルドが必要なboost::threadを使用しています。めんどいですね。さらに面倒なことにboost::threadはboost.orgが
配布しているビルドツールではビルドできない“静的リンク版のランタイムを使用する静的リンクライブラリ”を使用しています。
これを自前でビルドするのは面倒でしょうから、配布アーカイブに含めてあります。
boostを落としてインクルードパスのみ設定すればOKです。\n
　あとは……アーカイブを落とすとライブラリ本体以外にテストコードも落ちてきますが、これらのうちunittestとgametestは
<A HREF="http://www.lua.org/">Lua</A>が必要です。これにはVC用のビルド環境がついてきませんので、ビルド済みのライブラリと
をアーカイブに含めています。ヘッダはついてきませんので、本家からダウンロードしインクルードパスを通してください。\n
　それと、テストコードのうちunittestは<A HREF="http://cppunit.sourceforge.net/">cppunit</A>を使用しています。
このライブラリにはしっかりVC用のビルド環境が用意されてますので、自前でビルドしてください。<B>こっちも忙しいんです</B>。
cppunitはビルド環境のワークスペースを開くとcppunit cppunit_dll DSPlugIn TestPulginRunner TestRunnerと五つのプロジェクトが
見えますがgctpに必要なのはcppunitだけです。デフォルトでは[プロジェクト設定]→[C/C++設定]→[コード生成]→
[使用するランタイムライブラリ]がDebugは「ﾏﾙﾁｽﾚｯﾄﾞ(DLL,ﾃﾞﾊﾞｯｸﾞ)」、Releaseは「ﾏﾙﾁｽﾚｯﾄﾞ(DLL)」になっていると思いますので、
これを「ﾏﾙﾁｽﾚｯﾄﾞ(ﾃﾞﾊﾞｯｸﾞ)」、「ﾏﾙﾁｽﾚｯﾄﾞ」に変更してビルドしてください。
gctpは全般的に静的リンク版ランタイムを使用するようになっています。
ライブラリファイルが出来上がったら、そこにパスを通すことをお忘れなく。\n
　そ・れ・か・ら、
<A HREF="http://download.microsoft.com/download/VisualStudioNET/Install/7.0/WXP/EN-US/WTL70.exe">WTL7.0</A>が必要です。
これはヘッダだけで構成されているので、インクルードパスを通すのみ。

　 gctp本体のプロジェクトはアーカイブ直下の<B>gctp.dsp</B>です。
依存ライブラリの用意が整っていれば、無事ビルドできるはずです……。

@par DLL版ランタイムを使用するには
　 gctpは標準の設定ではランタイムを静的リンクしてしまいます。おかげで出来上がるバイナリは<B>巨大</B>です。\n
　なぜ静的リンクしているかというとSTLportのDLL版を使用したくなかったからです。出来上がったゲームを配布する時
面倒ですから。ところがSTLportは標準ではDLLランタイムを使用するDLL版と静的リンク版ランタイムを使用する静的リンク版
の２種類しかビルドしてくれません。またboost::threadも標準ではDLL版しかビルドしてくれません。そんなわけで全部
静的リンクランタイムで統一し、boost::threadのビルド環境も自前で作ることにしました。

　しかしこれだと出来上がるバイナリの巨大ぶりは正直引きます。なんとかmsvcrt60.dllなど、IE5以降をインストールしておけば
インストールされるランタイムはDLLで使用することにしましょう。どうせDirectXはDLLなんですし。

　まず、STLportをビルドする時、stl_user_config.hで<B>_STLP_NO_OWN_IOSTREAMS</B>フラグのコメントを外し、
<CODE>nmake -f vc6.mak all_staticx</CODE>
 これで、DLL版ランタイムを使用する静的リンク版stlportがビルドされます。_STLP_NO_OWN_IOSTREAMSとするのは、そうしないと
ほとんどMSのランタイムを使用しないからです。実際バイナリのサイズはちっとも変わりません。あとはboost::threadのビルド環境を
自前で作り、その際「ﾏﾙﾁｽﾚｯﾄﾞ(DLL,ﾃﾞﾊﾞｯｸﾞ)」または「ﾏﾙﾁｽﾚｯﾄﾞ(DLL)」をしてしてやります。lua、cppunitも同様に設定。\n
　この設定だとアーカイブに含まれるライブラリは役立たずになるので捨ててください。\n
　ただ、_STLP_NO_OWN_IOSTREAMSでほんとに挙動が変わらないかどうか不安なので、この設定は現在採用していないです。
*/


/*
 Factoryに、クラス名・ＲＴＴＩからDestroyMethodを取得する機構を用意しようかと思ったが、やめた。
 delete時にいちいちクラス名・ＲＴＴＩからmapを引くのはオーバーヘッドがでかすぎると思う。
 たしかに普通メモリ確保の手段はクラス毎で十分で、インスタンス毎に可変である必要は無いが、
 そのためにＤＢアクセスが必要なのはやりすぎだろう。インスタンス毎にポインタ一つのオーバーヘッドを
 受け入れ、インスタンス毎に可変のメリットがあったほうが良い。
 Factoryは、シリアライズ時のnew手段ＤＢであれば十分だ。
*/
